{"version":3,"names":["codegenNativeCommands","codegenNativeComponent","Commands","supportedCommands"],"sources":["LEGACY_PagerViewNativeComponent.ts"],"sourcesContent":["/*\n  Note: The types below are duplicated between this file and `src/specs/PagerViewNativeComponent.ts`.\n\n  This is on purpose. Firstly, we're declaring two native modules with two different iOS implementation flavors, but the same API.\n  Secondly, as these files serve as a reference point for React Native's new architecture Codegen process (which takes care of the\n  automatic generation of the native modules) we cannot extract the types into a separate file, or declare both native modules\n  in one file, as Codegen supports neither of these workarounds at the time of writing.\n\n  In order to make things as intuitive as possible, the duplicated types in this file are *not* exported, as they are meant for use\n  in this file only, by Codegen-related functions.\n*/\nimport type * as React from 'react';\nimport type { HostComponent, ViewProps } from 'react-native';\nimport codegenNativeCommands from 'react-native/Libraries/Utilities/codegenNativeCommands';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\nimport type {\n  DirectEventHandler,\n  Double,\n  Int32,\n  WithDefault,\n} from 'react-native/Libraries/Types/CodegenTypes';\n\ntype OnPageScrollEventData = Readonly<{\n  position: Double;\n  offset: Double;\n}>;\n\ntype OnPageSelectedEventData = Readonly<{\n  position: Double;\n}>;\n\ntype OnPageScrollStateChangedEventData = Readonly<{\n  pageScrollState: 'idle' | 'dragging' | 'settling';\n}>;\n\ninterface NativeProps extends ViewProps {\n  scrollEnabled?: WithDefault<boolean, true>;\n  layoutDirection?: WithDefault<'ltr' | 'rtl', 'ltr'>;\n  initialPage?: Int32;\n  orientation?: WithDefault<'horizontal' | 'vertical', 'horizontal'>;\n  offscreenPageLimit?: Int32;\n  pageMargin?: Int32;\n  overScrollMode?: WithDefault<'auto' | 'always' | 'never', 'auto'>;\n  overdrag?: WithDefault<boolean, false>;\n  keyboardDismissMode?: WithDefault<'none' | 'on-drag', 'none'>;\n  onPageScroll?: DirectEventHandler<OnPageScrollEventData>;\n  onPageSelected?: DirectEventHandler<OnPageSelectedEventData>;\n  onPageScrollStateChanged?: DirectEventHandler<OnPageScrollStateChangedEventData>;\n  useLegacy?: WithDefault<boolean, true>;\n}\n\ntype PagerViewViewType = HostComponent<NativeProps>;\n\ninterface NativeCommands {\n  setPage: (\n    viewRef: React.ElementRef<PagerViewViewType>,\n    selectedPage: Int32\n  ) => void;\n  setPageWithoutAnimation: (\n    viewRef: React.ElementRef<PagerViewViewType>,\n    selectedPage: Int32\n  ) => void;\n  setScrollEnabledImperatively: (\n    viewRef: React.ElementRef<PagerViewViewType>,\n    scrollEnabled: boolean\n  ) => void;\n}\n\nexport const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: [\n    'setPage',\n    'setPageWithoutAnimation',\n    'setScrollEnabledImperatively',\n  ],\n});\n\nexport default codegenNativeComponent<NativeProps>(\n  'LEGACY_RNCViewPager'\n) as HostComponent<NativeProps>;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,qBAAqB,MAAM,wDAAwD;AAC1F,OAAOC,sBAAsB,MAAM,yDAAyD;AAuD5F,OAAO,MAAMC,QAAwB,GAAGF,qBAAqB,CAAiB;EAC5EG,iBAAiB,EAAE,CACjB,SAAS,EACT,yBAAyB,EACzB,8BAA8B;AAElC,CAAC,CAAC;AAEF,eAAeF,sBAAsB,CACnC,qBACF,CAAC"}